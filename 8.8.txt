二维数组

int a[N][M]
N*M个整型元素
分别是
a[0][0], a[0][1], a[0][2], ..., a[0][M-1],
a[1][0], a[1][1], a[1][2], ..., a[1][M-1],
...
a[N-1][0], a[N-1][1], ..., a[N-1][M-1]

访问二维数组中的第i行第j列的元素：a[i][j]
遍历二维数组中的每个元素：嵌套循环

输入和输出示例：
#include <iostream>
using namespace std;
int n, m, a[13][13];
int main() {
	cin >> n >> m;
	
	for(int i = 0; i < n; i++) {
		for(int j = 0; j < m; j++) {
			cin >> a[i][j];
		}
	}
	
	for(int i = 0; i < n; i++) {
		for(int j = 0; j < m; j++) {
			cout << a[i][j] << ' ';
		}
		cout << endl;
	}
	
	return 0;
}

找矩阵中最大/最小的元素
交换矩阵的两行
判断一个元素在不在边界上：a[i][j] i==1 || i==n || j==1 || j==m
与a[i][j]相邻的数：
	上面的元素a[i-1][j] 下面a[i+1][j]
	左边a[i][j-1] 右边a[i][j+1]
	右下a[i+1][j+1] 右上a[i-1][j+1]

初值：
在main函数之外定义，默认值就是0
可以用for循环逐一赋值
也可以在定义时赋初值：int a[5] = {0,1,2,3,4}; //第一维长度可以省略
int a[4][3] = {1,2,3,4,5,6,7,8,9};
int a[4][3] = { {1,2,3}, {4,5,6}, {7,8,9} };
