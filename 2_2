几种算术运算符
+ - * / %
+= -= *= /= %=
++ -- 自增运算符、自减运算符

1.整数相除
10/3=3  -10/3=-3
整数相除，结果只保留整数部分，小数点后的部分会被舍弃，即“向零取整”

2.浮点数
double
1.1 3.14 3.3333 0.5
有小数点的数
.5和5.也是合法的浮点数

浮点数的另一种表示：科学计数法
3.14e6
aEb或者aeb，表示a乘10的b次方，即a*(10^b)
其中1<=a<10，b是整数

浮点数保留n位小数输出
#include <iomanip> //需要头文件iomanip
cout << fixed << setprecision(2) << a; //把浮点数a保留2位小数输出
fixed 把浮点数以小数形式输出，而不是科学计数法的形式
setprecision() 设置保留多少位小数
对后续的浮点数输出都起作用

浮点数四舍五入到整数的技巧
int(a+0.5) //浮点数a四舍五入为整数

整数与浮点数做除法，会自动把整数转成浮点数再进行计算
10.0/3=3.33333

3.基本数据类型
(1)布尔型
bool 只能取0或者1两种值 0就是false(假) 1就是true(真)
int类型转换为bool类型：只要int变量非零，转换成bool都是1

(2)整型
short范围 -32768~32767
          -2^15~2^15-1
int可以表示的范围-2147483648~2147483647
          -2^31~2^31-1
          大概范围：-2e9~2e9
long long
          范围：-2^63~2^63-1
          大概范围：-9e18~9e18
unsigned 无符号类型（不能存负数）
         unsigned int a; 范围0~2^32-1
         还有unsigned short、unsigned long long

(3)浮点型
float 单精度浮点数 有效数字约7位
double 双精度浮点数 有效数字约15位
long double 有效数字约18~19位

(4)字符型
char：单个字符，用英文单引号包含起来 'a'
包括数字字符'0'~'9'、大写字母'A'~'Z'、小写字母'a'~'z'、一些符号、一些控制字符
了解ascii码：整数与字符有对应关系，字符型的“本质”是整型

了解三大程序结构
顺序结构、选择结构、循环结构